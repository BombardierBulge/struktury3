#include <iostream>
#include <vector>

class HashTableLinearProbing {
private:
    static const int SIZE = 10;
    std::vector<int> table;
    std::vector<bool> occupied;

    int hashFunction(int key) const {
        return key % SIZE;
    }

public:
    HashTableLinearProbing() {
        table.resize(SIZE, -1);
        occupied.resize(SIZE, false);
    }

    void insert(int key) {
        int index = hashFunction(key);
        int startIndex = index;

        while (occupied[index]) {
            index = (index + 1) % SIZE;
            if (index == startIndex) {
                std::cout << "Hash table is full!\n";
                return;
            }
        }

        table[index] = key;
        occupied[index] = true;
    }

    bool search(int key) const {
        int index = hashFunction(key);
        int startIndex = index;

        while (occupied[index]) {
            if (table[index] == key) return true;
            index = (index + 1) % SIZE;
            if (index == startIndex) break;
        }

        return false;
    }

    void display() const {
        for (int i = 0; i < SIZE; i++) {
            std::cout << i << ": ";
            if (occupied[i])
                std::cout << table[i];
            else
                std::cout << "empty";
            std::cout << "\n";
        }
    }
};